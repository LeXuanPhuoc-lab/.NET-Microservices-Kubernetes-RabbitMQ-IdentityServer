services:
    postgres:
        image: postgres
        user: postgres
        environment: 
            - POSTGRES_PASSWORD=postgrespw
        ports:
            - 5433:5432
        volumes:
            # - pgdata:/var/lib/postgresql/data 
            - /var/lib/postgresql/data 
        # networks:
        #     - es-net
        healthcheck:
          test: ["CMD-SHELL", "pg_isready -U postgres"]
          interval: 5s
          timeout: 5s
          retries: 5
    mongodb:
        image: mongo
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root 
            - MONGO_INITDB_ROOT_PASSWORD=mongopw
        ports:
            - 27017:27017
        volumes:
            # - mongodata:/var/lib/mongodb/data
            - /var/lib/mongodb/data # -> Anonymous volume -> Delete image, also delete its volume
        healthcheck:
          test:
            [
              "CMD",
              "mongosh",
              "--quiet",
              "127.0.0.1/test",
              "--eval",
              "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'",
            ]
          interval: 10s
          timeout: 10s
          retries: 5
          start_period: 40s
    rabbitmq:
        image: rabbitmq:3-management-alpine
        ports: 
            - 5672:5672 # internal port
            - 15672:15672 # access in browser port
        volumes:
            - /var/lib/rabbitmq
        healthcheck:
          test: rabbitmq-diagnostics check_port_connectivity
          interval: 5s
          timeout: 5s
          retries: 5
    auction-svc:
        image: phuoclx/auction-svc:latest
        build:
            context: ./server
            dockerfile: src/AuctionService/Dockerfile
        environment: 
            - ASPNETCORE_ENVIRONMENT=Development
            - ASPNETCORE_URLS=http://+:80
            - ASPNETCORE_URLS=http://+:7777
            - RabbitMq__Host=rabbitmq 
            - RabbitMq__Username=guest
            - RabbitMq__Password=guest
            - ConnectionStrings__DefaultDB=Server=postgres:5432;User Id=postgres;Password=postgrespw;Database=auction
            - IdentityServiceUrl=http://localhost:5000
            - Kestrel__Endpoints__Grpc__Protocols=Http2
            - Kestrel__Endpoints__Grpc__Url=http://+:7777
            - Kestrel__Endpoints__WebApi__Protocols=Http1
            - Kestrel__Endpoints__WebApi__Url=http://+:80
        ports:
            - 7001:80
            - 7777:7777
        # networks:
        #     - es-net
        depends_on:
            # - elasticsearch
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
    bidding-svc:
        image: phuoclx/bidding-svc:latest 
        build:
            context: ./server
            dockerfile: src/BindingService/Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development 
            - ASPNETCORE_URLS=http://+:80
            - RabbitMq__Host=rabbitmq 
            - ConnectionStrings__BidDbConnection=mongodb://root:mongopw@mongodb:27017/BidDb?authSource=admin
            - IdentityServiceUrl=http://identity-svc
            - GrpcAuction=http://auction-svc:7777
        ports: 
            - 7003:80 
        depends_on:
            mongodb:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
    notify-svc:
        image: phuoclx/notify-svc:latest 
        build:
            context: ./server
            dockerfile: src/NotificationService/Dockerfile
        environment:
            - ASPNETCORE_ENVIRONMENT=Development 
            - ASPNETCORE_URLS=http://+:80
            - RabbitMq__Host=rabbitmq 
        ports: 
            - 7004:80 
        depends_on:
            rabbitmq:
                condition: service_healthy
    search-svc:
        image: phuoclx/search-svc:latest 
        build:
            context: ./server
            dockerfile: src/SearchService/Dockerfile 
        environment:
            - ASPNETCORE_ENVIRONMENT=Development 
            - ASPNETCORE_URLS=http://+:80
            - RabbitMq__Host=rabbitmq 
            - AppSettings__PageSize=5
            - ConnectionStrings__MongoDB=mongodb://root:mongopw@mongodb:27017/SearchDb?authSource=admin
            - AuctionServiceUrl=http://auction-svc
        ports: 
            - 7002:80 
        depends_on:
            mongodb:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
    identity-svc:
        image: phuoclx/identity-svc:latest 
        build:
            context: ./server
            dockerfile: src/IdentityService/Dockerfile 
        environment:
            - ASPNETCORE_ENVIRONMENT=Docker
            - ASPNETCORE_URLS=http://+:80 
            - IssuerUri=https://id.phuoclx.com
            - ClientApp=https://app.phuoclx.com
            - ConnectionStrings__DefaultConnection=Server=postgres:5432;User Id=postgres;Password=postgrespw;Database=identity
            - VIRTUAL_HOST=id.phuoclx.com
        depends_on:
            postgres:
                condition: service_healthy
    gateway-svc:
        image: phuoclx/gateway-svc:latest
        build:
            context: ./server
            dockerfile: src/GatewayService/Dockerfile 
        environment:
            - ASPNETCORE_ENVIRONMENT=Docker
            - ASPNETCORE_URLS=http://+:80
            - ClientApp=https://app.phuoclx.com
            - VIRTUAL_HOST=api.phuoclx.com
    web-app:
        image: phuoclx/web-app:latest
        build:
            context: .
            dockerfile: /client/web-app/Dockerfile
        volumes:
            - web-data:/var/lib/web/data
        environment:
            - AUTH_SECRET="8E0LsNQUbbuCHZgGdmWSaQxSrFya/rxDZht1NvmNtgs="
            - API_URL=http://gateway-svc
            - ID_URL=https://id.phuoclx.com
            - ID_URL_INTERNAL=http://identity-svc
            - AUTH_URL=https://app.phuoclx.com
            - AUTH_URL_INTERNAL=http://web-app:3000
            - VIRTUAL_HOST=app.phuoclx.com
            - VIRTUAL_PORT=3000
    nginx-proxy:
        image: nginxproxy/nginx-proxy
        container_name: nginx-proxy
        ports:
            - 80:80
            - 443:443
        volumes:
            - /var/run/docker.sock:/tmp/docker.sock:ro
            - ./devcerts:/etc/nginx/certs

        # if you want to proxy based on host ports, you'll want to use the host network
        # network_mode: "host"

    # elasticsearch:
    #     container_name: els
    #     image: elasticsearch:7.17.0
    #     environment:
    #         - xpack.security.enabled=false
    #         - discovery.type=single-node
    #         - "ES_JAVA_OPTS=-Xms1g -Xmx1g"  # Limit heap size to 1GB
    #         - bootstrap.memory_lock=true  # Prevent Elasticsearch from being swapped
    #     ports:
    #         - 9200:9200
    #     volumes:
    #         - elasticsearch-data:/usr/share/elasticsearch/data
    #     networks:
    #         - es-net 
    #     ulimits:
    #         memlock:
    #             soft: -1
    #             hard: -1
        # deploy:
        # resources:
        #     limits:
        #         memory: 2g  # Limit container memory to 2GB
        #     reservations:
        #         memory: 1g  # Reserve 1GB of memory
    # kibana:
    #     container_name: kibana
    #     image: kibana:7.17.0
    #     environment:
    #         - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    #     depends_on:
    #         - elasticsearch
    #     ports:
    #         - 5601:5601   
    #     networks:
    #         - es-net 
# networks:
    # es-net:
    #     driver: bridge
volumes:
    pgdata:
    mongodata:
    web-data:
    # elasticsearch-data: